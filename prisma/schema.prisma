generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  profileId       String @id @default(uuid())
  rollNo          String
  phone           String
  course          Course
  graduationYear  Int
  companyName     String
  designation     String
  linkedInProfile String
  resumeUrl       String

  // A profile belongs to one user
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String  @unique
  password  String
  firstName String
  lastName  String?

  role              Role     @default(USER)
  isProfileComplete Boolean  @default(false)
  isVerified        Boolean  @default(false)
  otp               String?  @default("")
  forgotPassword    Boolean? @default(false)

  profile     Profile? // A user can have one profile
  nominations Nomination[]
}

model Nomination {
  id             String      @id @default(uuid())
  userId         String
  nomineeType    NomineeType
  nomineeId      String?     // Required when nomineeType = OTHERS, null for MYSELF
  nominatedYear  Int         // New field: year in which the nomination is made

  user    User     @relation(fields: [userId], references: [id])
  nominee Nominee? @relation(fields: [nomineeId], references: [id])
  answers Answer[]
}

model Nominee {
  id                        String   @id @default(uuid())
  name                      String
  email                     String   @unique
  phone                     String?  @unique
  rollNo                    String? @default("")
  course                    Course
  graduationYear            Int
  relationshipWithNominator String
  currentEmployment         String
  linkedInProfile           String

  nominations Nomination[]
}

model Criteria {
  id      String   @id @default(uuid())
  text    String
  answers Answer[]
}

model Answer {
  id           String @id @default(uuid())
  nominationId String
  criteriaId   String
  response     String

  nomination Nomination @relation(fields: [nominationId], references: [id])
  criteria   Criteria   @relation(fields: [criteriaId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum NomineeType {
  MYSELF
  OTHERS
}

enum Course {
  AUTOMOBILE_ENGINEERING
  BIOMEDICAL_ENGINEERING
  CIVIL_ENGINEERING
  COMPUTER_SCIENCE_ENGINEERING
  COMPUTER_SCIENCE_ENGINEERING_AI_ML
  ELECTRICAL_ELECTRONICS_ENGINEERING
  ELECTRONICS_AND_COMMUNICATION_ENGINEERING
  INSTRUMENTATION_AND_CONTROL_ENGINEERING
  MECHANICAL_ENGINEERING
  METALLURGICAL_ENGINEERING
  PRODUCTION_ENGINEERING
  ROBOTICS_AND_AUTOMATION_ENGINEERING
  BIOTECHNOLOGY
  FASHION_TECHNOLOGY
  INFORMATION_TECHNOLOGY
  TEXTILE_TECHNOLOGY
  ELECTRICAL_ELECTRONICS_ENGINEERING_SANDWICH
  MECHANICAL_ENGINEERING_SANDWICH
  PRODUCTION_ENGINEERING_SANDWICH
  APPLIED_SCIENCE
  COMPUTER_SYSTEMS_AND_DESIGN
  AUTOMOTIVE_ENGINEERING
  BIOMETRICS_AND_CYBERSECURITY
  COMPUTER_SCIENCE_ENGINEERING_PG
  CONTROL_SYSTEMS
  EMBEDDED_AND_REALTIME_SYSTEMS
  ENGINEERING_DESIGN
  INDUSTRIAL_ENGINEERING
  INDUSTRIAL_METALLURGY
  MANUFACTURING_ENGINEERING
  POWER_ELECTRONICS_AND_DRIVES
  STRUCTURAL_ENGINEERING
  VLSI_DESIGN
  BIOTECHNOLOGY_PG
  NANO_SCIENCE_AND_TECHNOLOGY
  TEXTILE_TECHNOLOGY_PG
  PG_CERTIFICATE_WELDING_AND_QUALITY_ENGINEERING
  CERTIFICATE_WELDING_AND_QUALITY_ENGINEERING_INTEGRATED
  APPLIED_MATHEMATICS
  CYBER_SECURITY_INTEGRATED
  DATA_SCIENCE_INTEGRATED
  SOFTWARE_SYSTEMS_INTEGRATED
  THEORETICAL_COMPUTER_SCIENCE_INTEGRATED
  FASHION_DESIGN_AND_MERCHANDISING_INTEGRATED
  MASTER_OF_COMPUTER_APPLICATIONS
  MBA
  MBA_WASTE_MANAGEMENT_AND_SOCIAL_ENTREPRENEURSHIP
  PHD
}
